# Generated by Django 3.2.12 on 2022-09-21 13:57

from django.db import migrations, models
import django.db.models.deletion
from django.utils.text import slugify

# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# fn_portal.migrations.0045_popuplate_subspace_from_space
# fn_portal.migrations.0047_populate_subspace_fk_in_fn121


def fill_subspaces_from_spaces(apps, schema_editor):
    FN026 = apps.get_model("fn_portal", "FN026")
    FN026Subspace = apps.get_model("fn_portal", "FN026Subspace")

    for space in FN026.objects.prefetch_related("project").all():

        raw_slug = "-".join([space.project.prj_cd, space.space, space.space])

        subspace, created = FN026Subspace.objects.get_or_create(
            space_id=space.id,
            subspace=space.space,
            subspace_des=space.space_des,
            slug=slugify(raw_slug),
        )

        subspace.grdep_ge = space.grdep_ge
        subspace.grdep_lt = space.grdep_lt
        subspace.sidep_ge = space.sidep_ge
        subspace.sidep_lt = space.sidep_lt
        subspace.dd_lat = space.dd_lat
        subspace.dd_lon = space.dd_lon

        subspace.save()


def unfill_subspaces(apps, schema_editor):
    pass


def populate_fn121_subspace_id(apps, schema_editor):
    """Subspace id is currently empty in the FN121 table - but all of
    the FN026Subspace values are populted. Build a cache of subspace
    id's using their slug as the key and use it to populate the
    subspace_id field in FN121.

    """

    FN026Subspace = apps.get_model("fn_portal", "FN026Subspace")
    FN121 = apps.get_model("fn_portal", "FN121")

    subspace_cache = {
        x[0]: x[1] for x in FN026Subspace.objects.values_list("slug", "id")
    }

    for sample in (
        FN121.objects.prefetch_related("project").select_related("space").all()
    ):
        subspace_slug = "{}-{}-{}".format(
            sample.project.prj_cd, sample.space.space, sample.space.space
        )
        sample.subspace_id = subspace_cache.get(subspace_slug.lower())
        sample.space_id = None
        sample.save()


def unpopulate_fn121_subspace_id(apps, schema_editor):
    """To reverse our operation, we need to get the space id from
    each subspace, and it to populate the space_id field in the FN121
    table.

    """
    FN026Subspace = apps.get_model("fn_portal", "FN026Subspace")
    FN121 = apps.get_model("fn_portal", "FN121")

    subspace_cache = {
        x[0]: x[1] for x in FN026Subspace.objects.values_list("slug", "space_id")
    }

    for sample in (
        FN121.objects.prefetch_related("project").select_related("space").all()
    ):
        sample.space_id = subspace_cache.get(sample.subspace.slug)
        sample.subspace_id = None
        sample.save()


class Migration(migrations.Migration):

    replaces = [
        ("fn_portal", "0044_add_fn026subspace_table"),
        ("fn_portal", "0045_popuplate_subspace_from_space"),
        ("fn_portal", "0046_add_subspace_fk_to_fn121"),
        ("fn_portal", "0047_populate_subspace_fk_in_fn121"),
        ("fn_portal", "0048_drop_fn121_space_id"),
    ]

    dependencies = [
        ("fn_portal", "0043_idx_fn127_fish_age_preferred"),
    ]

    operations = [
        migrations.AlterField(
            model_name="fn026",
            name="space",
            field=models.CharField(db_index=True, help_text="Space Code", max_length=4),
        ),
        migrations.CreateModel(
            name="FN026Subspace",
            fields=[
                ("created_timestamp", models.DateTimeField(auto_now_add=True)),
                ("modified_timestamp", models.DateTimeField(auto_now=True)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "subspace",
                    models.CharField(
                        db_index=True, help_text="Subspace Code", max_length=4
                    ),
                ),
                (
                    "subspace_des",
                    models.CharField(help_text="Subspace Description", max_length=100),
                ),
                (
                    "grdep_ge",
                    models.FloatField(
                        blank=True,
                        help_text="The lower limit of gear depth (in metres).",
                        null=True,
                    ),
                ),
                (
                    "grdep_lt",
                    models.FloatField(
                        blank=True,
                        help_text="The upper limit of gear depth (in metres).",
                        null=True,
                    ),
                ),
                (
                    "sidep_ge",
                    models.FloatField(
                        blank=True,
                        help_text="The upper depth limit (in metres) of sites that belong to the corresponding spatial stratum",
                        null=True,
                    ),
                ),
                (
                    "sidep_lt",
                    models.FloatField(
                        blank=True,
                        help_text="The lower depth limit (in metres) of sites that belong to the corresponding spatial stratum. ",
                        null=True,
                    ),
                ),
                ("slug", models.SlugField(blank=True, editable=False, unique=True)),
                ("dd_lat", models.FloatField(blank=True, null=True)),
                ("dd_lon", models.FloatField(blank=True, null=True)),
                (
                    "space",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="spatial_substrata",
                        to="fn_portal.fn026",
                    ),
                ),
            ],
            options={
                "verbose_name": "FN026Subspace - Spatial Substrata",
                "verbose_name_plural": "FN026Subspace - Spatial Substrata",
                "ordering": ["subspace"],
            },
        ),
        migrations.AddConstraint(
            model_name="fn026subspace",
            constraint=models.UniqueConstraint(
                fields=("space", "subspace"), name="unique_subspace_code"
            ),
        ),
        migrations.AddConstraint(
            model_name="fn026subspace",
            constraint=models.UniqueConstraint(
                fields=("space", "subspace_des"), name="unique_subspace_des"
            ),
        ),
        migrations.RunPython(
            code=fill_subspaces_from_spaces,
            reverse_code=unfill_subspaces,
        ),
        migrations.AddField(
            model_name="fn121",
            name="subspace",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="samples",
                to="fn_portal.fn026subspace",
            ),
        ),
        migrations.RunPython(
            code=populate_fn121_subspace_id,
            reverse_code=unpopulate_fn121_subspace_id,
        ),
        migrations.RemoveField(
            model_name="fn121",
            name="space",
        ),
    ]
